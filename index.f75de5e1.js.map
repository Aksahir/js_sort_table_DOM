{"mappings":"AAAA,yCAAyC,GACzC;AAEA,kBAAkB;AAClB,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,SAAS,SAAS,gBAAgB,CAAC;IACzC,MAAM,QAAQ,SAAS,aAAa,CAAC;IAErC,OAAO,OAAO,CAAC,CAAC,UACd,QAAQ,gBAAgB,CAAC,SAAS;YAChC,MAAM,aAAa,QAAQ,WAAW,CAAC,IAAI;YAC3C,MAAM,YAAY,MAAM,IAAI,CAAC,MAAM,gBAAgB,CAAC;YACpD,MAAM,eAAe,MAAM,IAAI,CAAC,QAAQ,OAAO,CAAC;YAEhD,SAAS,SAAS,IAAI;gBACpB,IAAI,aAAa,EAAE;gBAEnB,OAAQ;oBACN,KAAK;oBACL,KAAK;wBACH,aAAa,KAAK,IAAI,CAAC,CAAC,GAAG,IACzB,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW,CAC9B,IAAI,GACJ,aAAa,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI;wBAEzD;oBAEF,KAAK;wBACH,aAAa,KAAK,IAAI,CACpB,CAAC,GAAG,IACF,WACE,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW,CAC9B,KAAK,CAAC,GACN,KAAK,CAAC,KACN,IAAI,CAAC,OAEV,WACE,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW,CAC9B,KAAK,CAAC,GACN,KAAK,CAAC,KACN,IAAI,CAAC;wBAGd;oBAEF,KAAK;wBACH,aAAa,KAAK,IAAI,CACpB,CAAC,GAAG,IACF,SAAS,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW,IAC1C,SAAS,EAAE,KAAK,CAAC,aAAa,CAAC,WAAW;wBAE9C;oBAEF;wBACE;gBACJ;gBAEA,MAAM,SAAS,GAAG;gBAClB,WAAW,OAAO,CAAC,CAAC,WAAa,MAAM,WAAW,CAAC;YACrD;YAEA,SAAS;QACX;AAEJ","sources":["src/scripts/main.js"],"sourcesContent":["/* eslint-disable function-paren-newline */\n'use strict';\n\n// write code here\ndocument.addEventListener('DOMContentLoaded', () => {\n  const header = document.querySelectorAll('thead th');\n  const table = document.querySelector('tbody');\n\n  header.forEach((element) =>\n    element.addEventListener('click', () => {\n      const headerName = element.textContent.trim();\n      const tableRows = Array.from(table.querySelectorAll('tr'));\n      const columnNumber = Array.from(header).indexOf(element);\n\n      function sortList(list) {\n        let sortedList = [];\n\n        switch (headerName) {\n          case 'Name':\n          case 'Position':\n            sortedList = list.sort((a, b) =>\n              a.cells[columnNumber].textContent\n                .trim()\n                .localeCompare(b.cells[columnNumber].textContent.trim()),\n            );\n            break;\n\n          case 'Salary':\n            sortedList = list.sort(\n              (a, b) =>\n                parseFloat(\n                  a.cells[columnNumber].textContent\n                    .slice(1)\n                    .split(',')\n                    .join(''),\n                ) -\n                parseFloat(\n                  b.cells[columnNumber].textContent\n                    .slice(1)\n                    .split(',')\n                    .join(''),\n                ),\n            );\n            break;\n\n          case 'Age':\n            sortedList = list.sort(\n              (a, b) =>\n                parseInt(a.cells[columnNumber].textContent) -\n                parseInt(b.cells[columnNumber].textContent),\n            );\n            break;\n\n          default:\n            return;\n        }\n\n        table.innerHTML = '';\n        sortedList.forEach((employee) => table.appendChild(employee));\n      }\n\n      sortList(tableRows);\n    }),\n  );\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}